package map.lopre2.jump2;import oneline.api.Direction;import oneline.api.PosHelper;import oneline.api.WorldAPI;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.init.Blocks;import net.minecraft.item.ItemStack;import net.minecraft.nbt.NBTTagCompound;import net.minecraft.network.datasync.DataParameter;import net.minecraft.network.datasync.DataSerializers;import net.minecraft.network.datasync.EntityDataManager;import net.minecraft.util.DamageSource;import net.minecraft.util.EnumHand;import net.minecraft.world.World;import map.lopre2.EntityPreBlock;import map.lopre2.LoPre2;public class EntityTeleportBlock extends EntityPreBlock {    private int moveDelay;    private static DataParameter<Integer> MAX_DELAY = EntityDataManager.createKey(EntityTeleportBlock.class, DataSerializers.VARINT);    private static DataParameter<Integer> MOVE_XZ = EntityDataManager.createKey(EntityTeleportBlock.class, DataSerializers.VARINT);    private static DataParameter<Float> MOVE_X = EntityDataManager.createKey(EntityTeleportBlock.class, DataSerializers.FLOAT);    private static DataParameter<Float> MOVE_Y = EntityDataManager.createKey(EntityTeleportBlock.class, DataSerializers.FLOAT);    private static DataParameter<Float> MOVE_Z = EntityDataManager.createKey(EntityTeleportBlock.class, DataSerializers.FLOAT);    private boolean reverse;    public EntityTeleportBlock(World worldObj) {        super(worldObj);        this.setBlockMode(Blocks.PURPUR_BLOCK);        this.setCollision(true);        this.isFly = true;    }    @Override    protected void entityInit() {        super.entityInit();        dataManager.register(MAX_DELAY, 30);        dataManager.register(MOVE_XZ, -1);        dataManager.register(MOVE_X, 0F);        dataManager.register(MOVE_Y, 0F);        dataManager.register(MOVE_Z, 0F);    }    @Override    public String getCustomNameTag() {        return "텔레포트 블럭 이동시간  " + getMaxDelay();    }    @Override    public boolean attackEntityFrom(DamageSource source, float amount) {        if (source.getEntity() instanceof EntityPlayer && WorldAPI.equalsHeldItem(LoPre2.itemSpanner)) {            EntityPlayer playerIn = (EntityPlayer) source.getEntity();            if (playerIn.isSneaking())                setMaxDelay(getMaxDelay() - 1);            else                setMaxDelay(getMaxDelay() + 1);            return false;        }        return super.attackEntityFrom(source, amount);    }    @Override    protected boolean processInteract(EntityPlayer player, EnumHand hand, ItemStack stack) {        if (WorldAPI.equalsHeldItem(LoPre2.itemSpanner)) {            PosHelper posHelper = new PosHelper(player);            setMoveXZ(0);            float moveY = (float) posHelper.getY(2, false);            if (moveY != 0) {                setMoveY(moveY);                setMaxDelay(40);            } else {                setMoveX((float) posHelper.getX(Direction.FORWARD, 2, false));                setMoveZ((float) posHelper.getZ(Direction.FORWARD, 2, false));            }        }        return super.processInteract(player, hand, stack);    }    @Override    public EntityTeleportBlock spawn(double x, double y, double z) {        EntityTeleportBlock lavaBlock = new EntityTeleportBlock(worldObj);        lavaBlock.setSpawnXYZ(x, y, z);        lavaBlock.setTeleport(false);        lavaBlock.setPosition(lavaBlock.getSpawnX(), lavaBlock.getSpawnY(), lavaBlock.getSpawnZ());        lavaBlock.setBlockMode(getCurrentStack());        worldObj.spawnEntityInWorld(lavaBlock);        this.copyModel(lavaBlock);        return lavaBlock;    }    @Override    public void onLivingUpdate() {        super.onLivingUpdate();        this.setBlock(Blocks.PURPUR_BLOCK);        if (isServerWorld()) {            moveDelay++;            if (getMoveXZ() != -1 && moveDelay >= getMaxDelay()) {                moveDelay = 0;                if (!reverse) {                    addMoveXZ(1);                } else if (reverse) {                    addMoveXZ(-1);                }                if (getMoveXZ() == 3 || getMoveXZ() == -1) {                    reverse = !reverse;                    setMoveXZ(1);                }                if (getMoveXZ() == 2)                    setPositionAndUpdate(getSpawnX() + getMoveX(), getSpawnY() + getMoveY(), getSpawnZ() + getMoveZ());                if (getMoveXZ() == 1)                    setPositionAndUpdate(getSpawnX(), getSpawnY(), getSpawnZ());                if (getMoveXZ() == 0)                    setPositionAndUpdate(getSpawnX() - getMoveX(), getSpawnY() - getMoveY(), getSpawnZ() - getMoveZ());            }        }    }    @Override    public void writeEntityToNBT(NBTTagCompound compound) {        super.writeEntityToNBT(compound);        compound.setDouble("moveX", getMoveX());        compound.setDouble("moveY", getMoveY());        compound.setDouble("moveZ", getMoveZ());        compound.setDouble("moveXZ", getMoveXZ());        compound.setInteger("maxDelay", getMaxDelay());        compound.setBoolean("isReverse", reverse);    }    @Override    public void readEntityFromNBT(NBTTagCompound compound) {        super.readEntityFromNBT(compound);        setMaxDelay(compound.getInteger("maxDelay"));        setMoveX(compound.getFloat("moveX"));        setMoveY(compound.getFloat("moveY"));        setMoveZ(compound.getFloat("moveZ"));        setMoveXZ(compound.getInteger("moveXZ"));        reverse = compound.getBoolean("isReverse");    }    public void setMaxDelay(int xz) {        dataManager.set(MAX_DELAY, xz);    }    public int getMaxDelay() {        return dataManager.get(MAX_DELAY);    }    public void addMoveXZ(int xz) {        dataManager.set(MOVE_XZ, getMoveXZ() + xz);    }    public void setMoveXZ(int xz) {        dataManager.set(MOVE_XZ, xz);    }    public int getMoveXZ() {        return dataManager.get(MOVE_XZ);    }    public void setMoveX(float xz) {        dataManager.set(MOVE_X, xz);    }    public void setMoveY(float xz) {        dataManager.set(MOVE_Y, xz);    }    public void setMoveZ(float xz) {        dataManager.set(MOVE_Z, xz);    }    public float getMoveX() {        return dataManager.get(MOVE_X);    }    public float getMoveY() {        return dataManager.get(MOVE_Y);    }    public float getMoveZ() {        return dataManager.get(MOVE_Z);    }}