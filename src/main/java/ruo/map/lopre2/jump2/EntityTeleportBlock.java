package ruo.map.lopre2.jump2;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.init.Blocks;import net.minecraft.init.Items;import net.minecraft.item.ItemStack;import net.minecraft.nbt.NBTTagCompound;import net.minecraft.network.datasync.DataParameter;import net.minecraft.network.datasync.DataSerializers;import net.minecraft.network.datasync.EntityDataManager;import net.minecraft.util.EnumHand;import net.minecraft.world.World;import ruo.map.lopre2.EntityPreBlock;import ruo.minigame.api.PosHelper;import ruo.minigame.api.SpawnDirection;import ruo.minigame.api.WorldAPI;public class EntityTeleportBlock extends EntityPreBlock {    private int timeDelay, moveDelay;    private static DataParameter<Integer> MOVE_XZ = EntityDataManager.createKey(EntityTeleportBlock.class, DataSerializers.VARINT);    private double moveX, moveZ;    private boolean reverse;    public EntityTeleportBlock(World worldObj) {        super(worldObj);        this.setBlockMode(Blocks.STONE);    }    @Override    protected void entityInit() {        super.entityInit();        dataManager.register(MOVE_XZ, 0);    }    @Override    public String getCustomNameTag() {        return "텔레포트 블럭 이동시간  " + moveDelay;    }    @Override    protected boolean processInteract(EntityPlayer player, EnumHand hand, ItemStack stack) {        if (WorldAPI.equalsHeldItem(Items.APPLE)) {            PosHelper posHelper = new PosHelper(player);            moveX = posHelper.getX(SpawnDirection.FORWARD, 2, false);            moveZ = posHelper.getZ(SpawnDirection.FORWARD, 2, false);        }        if (WorldAPI.equalsHeldItem(Items.GOLDEN_APPLE)) {            if (player.isSneaking())                moveDelay--;            else                moveDelay++;        }        return super.processInteract(player, hand, stack);    }    @Override    public void onLivingUpdate() {        super.onLivingUpdate();        timeDelay++;        if (timeDelay >= 20) {            timeDelay = 0;            if (!reverse)                addMoveXZ(1);            else if(reverse)                addMoveXZ(-1);            if (getMoveXZ() == 3 || getMoveXZ() == -1) {                reverse = !reverse;                if(getMoveXZ() == 3) addMoveXZ(-1);                if(getMoveXZ() == -1) addMoveXZ(1);            }            System.out.println(isServerWorld()+" - "+getMoveXZ()+" - "+reverse);        }        if (getMoveXZ() == 2)            setPosition(getSpawnX() + moveX, getSpawnY(), getSpawnZ() + moveZ);        if (getMoveXZ() == 1)            setPosition(getSpawnX(), getSpawnY(), getSpawnZ());        if (getMoveXZ() == 0)            setPosition(getSpawnX() - moveX, getSpawnY(), getSpawnZ() - moveZ);    }    @Override    public void writeEntityToNBT(NBTTagCompound compound) {        super.writeEntityToNBT(compound);        compound.setDouble("moveX", moveX);        compound.setDouble("moveZ", moveZ);        compound.setDouble("moveXZ", getMoveXZ());    }    @Override    public void readEntityFromNBT(NBTTagCompound compound) {        super.readEntityFromNBT(compound);        moveX = compound.getDouble("moveX");        moveZ = compound.getDouble("moveZ");        setMoveXZ(compound.getInteger("moveXZ"));    }    public void addMoveXZ(int xz){        dataManager.set(MOVE_XZ, getMoveXZ()+xz);    }    public void setMoveXZ(int xz){        dataManager.set(MOVE_XZ, xz);    }    public int getMoveXZ(){        return dataManager.get(MOVE_XZ);    }}